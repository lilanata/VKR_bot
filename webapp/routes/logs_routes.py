import logging
import os

from flask import Blueprint, render_template, send_file, redirect, url_for, flash, current_app

from . import login_required

logger = logging.getLogger(__name__)
logs_bp = Blueprint("logs", __name__)
log_path = os.path.join("logs", "app.log")


@logs_bp.route("/", methods=["GET"])
@login_required
def view_logs():
    if not os.path.exists(log_path):
        lines = ["–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"]
    else:
        with open(log_path, encoding="utf-8", errors="ignore") as f:
            lines = [line.replace("[32m", "") for line in f.readlines()][-200:]
    return render_template("logs.html", logs=lines)


@logs_bp.route("/download", methods=["GET"])
@login_required
def download_logs():
    if not os.path.exists(log_path):
        flash("–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", "warning")
        return redirect(url_for("logs.view_logs"))
    return send_file(log_path, as_attachment=True, download_name=os.path.basename(log_path))


@logs_bp.route("/clear", methods=["POST"])
@login_required
def clear_logs():
    try:
        open(log_path, "w", encoding="utf-8").close()
        flash("‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "info")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: %s", e)
        flash("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", "error")
    return redirect(url_for("logs.view_logs"))
